[{"id":"717202d1.7772bc","type":"ibmiot out","z":"bb6cd730.7f7dc8","authentication":"boundService","apiKey":"d5180ceb.c580c","outputType":"evt","deviceId":"Washer01","deviceType":"WashingMachine","eventCommandType":"status","format":"json","data":"msg.payload","qos":"","name":"Washer01","service":"registered","x":822,"y":216.183349609375,"wires":[]},{"id":"9b980166.c348d","type":"inject","z":"bb6cd730.7f7dc8","name":"Voltage Sensor Simulator","topic":"","payload":"{ \"d\": { \"voltage\": 240, \"frequency\": 50 } }","payloadType":"json","repeat":"0.5","crontab":"","once":false,"x":232.66668701171875,"y":217.10000610351562,"wires":[["3f637e32.2769c2"]]},{"id":"3f637e32.2769c2","type":"function","z":"bb6cd730.7f7dc8","name":"Voltage data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    msg.payload.d.voltage = Math.floor(Math.random() * (240 - 220) + 220);\n} else {\n    msg.payload.d.voltage = Math.floor(Math.random() * (260 - 240) + 240);\n}\nmsg.payload.d.frequency = Math.floor(Math.random() * (80 - 60 + 1) + 60);\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"voltage\"\nreturn msg;","outputs":1,"noerr":0,"x":451.550048828125,"y":192.98333740234375,"wires":[["39005308.30d6cc","a39f6a9c.0f16a"]]},{"id":"39005308.30d6cc","type":"function","z":"bb6cd730.7f7dc8","name":"","func":"msg.payload.d.ts = new Date().getTime();\nreturn msg;","outputs":1,"noerr":0,"x":659.5,"y":217.23333740234375,"wires":[["717202d1.7772bc"]]},{"id":"1e58205f.408bb","type":"ibmiot in","z":"bb6cd730.7f7dc8","authentication":"boundService","apiKey":"d5180ceb.c580c","inputType":"cmd","deviceId":"","applicationId":"","deviceType":"+","eventType":"+","commandType":"","format":"json","name":"IBM IoT","service":"registered","allDevices":true,"allApplications":"","allDeviceTypes":true,"allEvents":true,"allCommands":true,"allFormats":true,"qos":0,"x":98.5,"y":467.25,"wires":[["a9b506c7.4c7168"]]},{"id":"a9b506c7.4c7168","type":"debug","z":"bb6cd730.7f7dc8","name":"Emergency Shutdown","active":true,"console":"false","complete":"payload","x":447.5,"y":548.5,"wires":[]},{"id":"a39f6a9c.0f16a","type":"function","z":"bb6cd730.7f7dc8","name":"zscore","func":"var aggwindow = context.get('aggwindow')||[];\n\naggwindow.push(msg.payload.d.voltage); \n\nif (aggwindow.length> 30) {\n    sum = aggwindow.reduce((a,b)=>a+b,0);\n    n = aggwindow.length;\n    mean = sum/n;\n    sd = Math.sqrt(aggwindow.map(x=>Math.pow(mean-x,2)).reduce((a,b)=>a+b,0));\n    aggwindow.shift();\n    msg.zscore = (mean-msg.payload.d.voltage)/(sd+0.0001)\n}\ncontext.set('aggwindow',aggwindow);\n\nvar min = context.get('min')||300;\nvar max = context.get('max')||0;\n\ncontext.set('min',Math.min(min,msg.payload.d.voltage));\ncontext.set('max',Math.max(max,msg.payload.d.voltage));\n\nmsg.payload=msg.payload.d.voltage+\":\"+msg.zscore+\":\"+min+\":\"+max;\n\n\nreturn msg;","outputs":1,"noerr":0,"x":372,"y":420,"wires":[["e83a92ea.4f1b58","d41bd8e5.dc4078"]]},{"id":"e83a92ea.4f1b58","type":"function","z":"bb6cd730.7f7dc8","name":"alert","func":"if (Math.abs(msg.zscore)>0.5) {\n    msg.payload=\"ALERT ALERT ALERT!!!!!\";\n    return msg;\n}\n","outputs":1,"noerr":0,"x":528,"y":461,"wires":[["a9b506c7.4c7168"]]},{"id":"d41bd8e5.dc4078","type":"debug","z":"bb6cd730.7f7dc8","name":"Debug zscore","active":true,"console":"false","complete":"payload","x":713.5,"y":397.5,"wires":[]},{"id":"937626d4.ccbd2","type":"inject","z":"bb6cd730.7f7dc8","name":"Mechanical Sensor Simulator","topic":"","payload":"{ \"d\": { \"speed\": 1200 } }","payloadType":"json","repeat":"5","crontab":"","once":false,"x":240.66668701171875,"y":301.1000061035156,"wires":[["9986d5c8.91a088"]]},{"id":"9986d5c8.91a088","type":"function","z":"bb6cd730.7f7dc8","name":"Drum data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 100 <= 90) {\n    // No variation - within the safe limit\n    msg.payload.d.speed = Math.floor(Math.random() * (1100 - 1000) + 1000);    \n} else {\n    msg.payload.d.speed = Math.floor(Math.random() * (1300 - 1150) + 1150);        \n}\n\n\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"drum\"\nreturn msg;","outputs":1,"noerr":0,"x":483.5500183105469,"y":300.98333740234375,"wires":[["39005308.30d6cc"]]},{"id":"bd7d0232.cafd18","type":"inject","z":"bb6cd730.7f7dc8","name":"Fluid Simulator","topic":"","payload":"{ \"d\": {\"count\":0, \"hardness\": 61, \"temperature\": 50, \"flowrate\": 11, \"fluidlevel\": \"acceptable\" } }","payloadType":"json","repeat":"1","crontab":"","once":false,"x":253,"y":142,"wires":[["2aab5cf6.71999c"]]},{"id":"2aab5cf6.71999c","type":"function","z":"bb6cd730.7f7dc8","name":"Fluid data","func":"// initialise the counter to 0 if it doesn't exist already\nvar count = context.get('count')||0;\nvar hardness = context.get('hardness')||0;\nvar randomness = context.get('randomness')||0;\ncount += 1;\n// store the value back\ncontext.set('count',count);\n// make it part of the outgoing msg object\nmsg.payload.d.count = count;\nif(count % 300 == 0) {\n    context.set('randomness',1);\n    context.set('hardness', 83);\n} else if(count % 20 == 0) {\n    context.set('randomness',0);\n} else if(count % 121 == 0) {\n    context.set('randomness',2);\n    context.set('hardness', 100);\n}\n\nif(randomness == 0) {\n    // no variation\n    msg.payload.d.hardness = Math.floor(Math.random() * (80 - 70 + 1) + 70);\n} else if(randomness == 1) {\n    // gradually increase\n    msg.payload.d.hardness = hardness + 1;\n    context.set('hardness', (hardness + 1));\n} else {\n    msg.payload.d.hardness = hardness + 5;\n    context.set('hardness', (hardness + 5));\n}\nmsg.payload.d.temperature = Math.floor(Math.random() * (100 - 80 + 1) + 80);\n\n//msg.payload = JSON.stringify(msg.payload)\nmsg.eventOrCommandType = \"fluid\"\nreturn msg;","outputs":1,"noerr":0,"x":474.5500183105469,"y":141.48333740234375,"wires":[["39005308.30d6cc"]]},{"id":"d5180ceb.c580c","type":"ibmiot","z":"bb6cd730.7f7dc8","name":"coi0nz"}]